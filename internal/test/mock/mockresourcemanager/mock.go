// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nokamoto/demo20-apis/cloud/resourcemanager/v1alpha (interfaces: ResourceManagerClient)

// Package mockresourcemanager is a generated GoMock package.
package mockresourcemanager

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha "github.com/nokamoto/demo20-apis/cloud/resourcemanager/v1alpha"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockResourceManagerClient is a mock of ResourceManagerClient interface
type MockResourceManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerClientMockRecorder
}

// MockResourceManagerClientMockRecorder is the mock recorder for MockResourceManagerClient
type MockResourceManagerClientMockRecorder struct {
	mock *MockResourceManagerClient
}

// NewMockResourceManagerClient creates a new mock instance
func NewMockResourceManagerClient(ctrl *gomock.Controller) *MockResourceManagerClient {
	mock := &MockResourceManagerClient{ctrl: ctrl}
	mock.recorder = &MockResourceManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceManagerClient) EXPECT() *MockResourceManagerClientMockRecorder {
	return m.recorder
}

// CreateProject mocks base method
func (m *MockResourceManagerClient) CreateProject(arg0 context.Context, arg1 *v1alpha.CreateProjectRequest, arg2 ...grpc.CallOption) (*v1alpha.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*v1alpha.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockResourceManagerClientMockRecorder) CreateProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockResourceManagerClient)(nil).CreateProject), varargs...)
}

// GetProject mocks base method
func (m *MockResourceManagerClient) GetProject(arg0 context.Context, arg1 *v1alpha.GetProjectRequest, arg2 ...grpc.CallOption) (*v1alpha.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProject", varargs...)
	ret0, _ := ret[0].(*v1alpha.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockResourceManagerClientMockRecorder) GetProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockResourceManagerClient)(nil).GetProject), varargs...)
}

// UpdateProject mocks base method
func (m *MockResourceManagerClient) UpdateProject(arg0 context.Context, arg1 *v1alpha.UpdateProjectRequest, arg2 ...grpc.CallOption) (*v1alpha.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProject", varargs...)
	ret0, _ := ret[0].(*v1alpha.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockResourceManagerClientMockRecorder) UpdateProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockResourceManagerClient)(nil).UpdateProject), varargs...)
}
