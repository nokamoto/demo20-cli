// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nokamoto/demo20-apis/cloud/iam/v1alpha (interfaces: IamClient)

// Package mockiam is a generated GoMock package.
package mockiam

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha "github.com/nokamoto/demo20-apis/cloud/iam/v1alpha"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockIamClient is a mock of IamClient interface
type MockIamClient struct {
	ctrl     *gomock.Controller
	recorder *MockIamClientMockRecorder
}

// MockIamClientMockRecorder is the mock recorder for MockIamClient
type MockIamClientMockRecorder struct {
	mock *MockIamClient
}

// NewMockIamClient creates a new mock instance
func NewMockIamClient(ctrl *gomock.Controller) *MockIamClient {
	mock := &MockIamClient{ctrl: ctrl}
	mock.recorder = &MockIamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIamClient) EXPECT() *MockIamClientMockRecorder {
	return m.recorder
}

// AddRoleBinding mocks base method
func (m *MockIamClient) AddRoleBinding(arg0 context.Context, arg1 *v1alpha.AddRoleBindingRequest, arg2 ...grpc.CallOption) (*v1alpha.RoleBinding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRoleBinding", varargs...)
	ret0, _ := ret[0].(*v1alpha.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleBinding indicates an expected call of AddRoleBinding
func (mr *MockIamClientMockRecorder) AddRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleBinding", reflect.TypeOf((*MockIamClient)(nil).AddRoleBinding), varargs...)
}

// CreateMachineUser mocks base method
func (m *MockIamClient) CreateMachineUser(arg0 context.Context, arg1 *v1alpha.CreateMachineUserRequest, arg2 ...grpc.CallOption) (*v1alpha.MachineUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMachineUser", varargs...)
	ret0, _ := ret[0].(*v1alpha.MachineUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachineUser indicates an expected call of CreateMachineUser
func (mr *MockIamClientMockRecorder) CreateMachineUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineUser", reflect.TypeOf((*MockIamClient)(nil).CreateMachineUser), varargs...)
}

// CreateRole mocks base method
func (m *MockIamClient) CreateRole(arg0 context.Context, arg1 *v1alpha.CreateRoleRequest, arg2 ...grpc.CallOption) (*v1alpha.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*v1alpha.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockIamClientMockRecorder) CreateRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIamClient)(nil).CreateRole), varargs...)
}

// DeleteMachineUser mocks base method
func (m *MockIamClient) DeleteMachineUser(arg0 context.Context, arg1 *v1alpha.DeleteMachineUserRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMachineUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachineUser indicates an expected call of DeleteMachineUser
func (mr *MockIamClientMockRecorder) DeleteMachineUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineUser", reflect.TypeOf((*MockIamClient)(nil).DeleteMachineUser), varargs...)
}

// DeleteRole mocks base method
func (m *MockIamClient) DeleteRole(arg0 context.Context, arg1 *v1alpha.DeleteRoleRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockIamClientMockRecorder) DeleteRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIamClient)(nil).DeleteRole), varargs...)
}

// GetRole mocks base method
func (m *MockIamClient) GetRole(arg0 context.Context, arg1 *v1alpha.GetRoleRequest, arg2 ...grpc.CallOption) (*v1alpha.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*v1alpha.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockIamClientMockRecorder) GetRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockIamClient)(nil).GetRole), varargs...)
}

// ListMachineUser mocks base method
func (m *MockIamClient) ListMachineUser(arg0 context.Context, arg1 *v1alpha.ListMachineUserRequest, arg2 ...grpc.CallOption) (*v1alpha.ListMachineUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineUser", varargs...)
	ret0, _ := ret[0].(*v1alpha.ListMachineUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineUser indicates an expected call of ListMachineUser
func (mr *MockIamClientMockRecorder) ListMachineUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineUser", reflect.TypeOf((*MockIamClient)(nil).ListMachineUser), varargs...)
}

// ListRole mocks base method
func (m *MockIamClient) ListRole(arg0 context.Context, arg1 *v1alpha.ListRoleRequest, arg2 ...grpc.CallOption) (*v1alpha.ListRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRole", varargs...)
	ret0, _ := ret[0].(*v1alpha.ListRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole
func (mr *MockIamClientMockRecorder) ListRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockIamClient)(nil).ListRole), varargs...)
}

// ListRoleBinding mocks base method
func (m *MockIamClient) ListRoleBinding(arg0 context.Context, arg1 *v1alpha.ListRoleBindingRequest, arg2 ...grpc.CallOption) (*v1alpha.ListRoleBindingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleBinding", varargs...)
	ret0, _ := ret[0].(*v1alpha.ListRoleBindingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBinding indicates an expected call of ListRoleBinding
func (mr *MockIamClientMockRecorder) ListRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBinding", reflect.TypeOf((*MockIamClient)(nil).ListRoleBinding), varargs...)
}

// RemoveRoleBinding mocks base method
func (m *MockIamClient) RemoveRoleBinding(arg0 context.Context, arg1 *v1alpha.RemoveRoleBindingRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRoleBinding", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoleBinding indicates an expected call of RemoveRoleBinding
func (mr *MockIamClientMockRecorder) RemoveRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleBinding", reflect.TypeOf((*MockIamClient)(nil).RemoveRoleBinding), varargs...)
}

// UpdateRole mocks base method
func (m *MockIamClient) UpdateRole(arg0 context.Context, arg1 *v1alpha.UpdateRoleRequest, arg2 ...grpc.CallOption) (*v1alpha.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(*v1alpha.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockIamClientMockRecorder) UpdateRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIamClient)(nil).UpdateRole), varargs...)
}
